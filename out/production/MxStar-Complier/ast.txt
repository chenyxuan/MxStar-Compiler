@ ASTRootNode (1:0):
>>> decls:
	@ VarDeclListNode (1:0):
	>>> decls
		@ VaeDeclNode (1:4):
		>>> type:
			@ TypeNode (1:0):
			>>> type: mxstar.symbol.type.IntType@396e2f39
		>>> name: id
		>>> init: null
	>>> end of decls
	@ ClassDeclNode (3:0):
	>>> name: Test
	>>> varMember: null
	>>> funcMember:
		@ FuncDeclNode (4:1):
		>>> returnType:
			@ TypeNode (4:1):
			>>> type: mxstar.symbol.type.BoolType@a74868d
		>>> name: id
		>>> parameterList:
			@ VaeDeclNode (4:9):
			>>> type:
				@ TypeNode (4:9):
				>>> type: mxstar.symbol.type.BoolType@a74868d
			>>> name: id_
			>>> init: null
		>>> end of parameterList
		>>> body:
			@ BlockStmtNode (4:19):
			>>> compound:
				@ ReturnStmtNode (5:2):
				>>> expr:
					@ BinaryExprNode (5:9):
					>>> op: EQ
					>>> lhs:
						@ IdentifierExprNode (5:9):
						>>> identifier: id_
					>>> rhs:
						@ BoolConstExprNode (5:16):
						>>> value: false
			>>> end of compound
		@ FuncDeclNode (8:1):
		>>> returnType: null
		>>> name: Test
		>>> parameterList: null
		>>> body:
			@ BlockStmtNode (8:8):
			>>> compound: null
		@ FuncDeclNode (10:1):
		>>> returnType:
			@ TypeNode (10:1):
			>>> type: mxstar.symbol.type.VoidType@12c8a2c0
		>>> name: test
		>>> parameterList:
			@ VaeDeclNode (10:11):
			>>> type:
				@ TypeNode (10:11):
				>>> type: mxstar.symbol.type.StringType@7e0e6aa2
			>>> name: id
			>>> init: null
		>>> end of parameterList
		>>> body:
			@ BlockStmtNode (10:22):
			>>> compound:
				@ AssignExprNode (11:2):
				>>> lhs:
					@ IdentifierExprNode (11:2):
					>>> identifier: id
				>>> rhs:
					@ StringConstExprNode (11:7):
					>>> value: "i am string"
				@ CondStmtNode (12:2):
				>>> cond:
					@ FuncCallExprNode (12:6):
					>>> func:
						@ MemberAccessExprNode (12:6):
						>>> expr:
							@ ThisExprNode (12:6):
						>>> member: id
					>>> args:
						@ BinaryExprNode (12:14):
						>>> op: LOG_OR
						>>> lhs:
							@ BinaryExprNode (12:15):
							>>> op: NEQ
							>>> lhs:
								@ ThisExprNode (12:15):
							>>> rhs:
								@ NullExprNode (12:23):
						>>> rhs:
							@ BinaryExprNode (12:33):
							>>> op: EQ
							>>> lhs:
								@ NullExprNode (12:33):
							>>> rhs:
								@ ThisExprNode (12:41):
					>>> end of args
				>>> thenStmt:
					@ BlockStmtNode (12:49):
					>>> compound:
						@ VarDeclListNode (13:3):
						>>> decls
							@ VaeDeclNode (13:8):
							>>> type:
								@ TypeNode (13:3):
								>>> type: mxstar.symbol.type.BoolType@a74868d
							>>> name: id
							>>> init:
								@ FuncCallExprNode (13:13):
								>>> func:
									@ MemberAccessExprNode (13:13):
									>>> expr:
										@ ThisExprNode (13:13):
									>>> member: id
								>>> args:
									@ BoolConstExprNode (13:21):
									>>> value: true
								>>> end of args
						>>> end of decls
						@ BlockStmtNode (14:3):
						>>> compound:
							@ VarDeclListNode (15:4):
							>>> decls
								@ VaeDeclNode (15:8):
								>>> type:
									@ TypeNode (15:4):
									>>> type: mxstar.symbol.type.IntType@396e2f39
								>>> name: id
								>>> init: null
							>>> end of decls
							@ ForStmtNode (16:4):
							>>> init:
								@ AssignExprNode (16:9):
								>>> lhs:
									@ IdentifierExprNode (16:9):
									>>> identifier: id
								>>> rhs:
									@ IntConstExprNode (16:14):
									>>> value: 0
							>>> cond:
								@ FuncCallExprNode (16:17):
								>>> func:
									@ MemberAccessExprNode (16:17):
									>>> expr:
										@ ThisExprNode (16:17):
									>>> member: id
								>>> args:
									@ BinaryExprNode (16:25):
									>>> op: GT
									>>> lhs:
										@ IdentifierExprNode (16:25):
										>>> identifier: id
									>>> rhs:
										@ IntConstExprNode (16:30):
										>>> value: 0
								>>> end of args
							>>> step:
								@ SuffixExprNode (16:34):
								>>> op: INC
								>>> expr:
									@ IdentifierExprNode (16:34):
									>>> identifier: id
							>>> stmt: 
								@ BlockStmtNode (16:40):
								>>> compound:
									@ CondStmtNode (17:5):
									>>> cond:
										@ FuncCallExprNode (17:9):
										>>> func:
											@ MemberAccessExprNode (17:9):
											>>> expr:
												@ ThisExprNode (17:9):
											>>> member: id
										>>> args:
											@ BinaryExprNode (17:17):
											>>> op: LT
											>>> lhs:
												@ BinaryExprNode (17:18):
												>>> op: BIT_OR
												>>> lhs:
													@ IdentifierExprNode (17:18):
													>>> identifier: id
												>>> rhs:
													@ IdentifierExprNode (17:23):
													>>> identifier: id
											>>> rhs:
												@ IntConstExprNode (17:30):
												>>> value: 0
										>>> end of args
									>>> thenStmt:
										@ BlockStmtNode (17:34):
										>>> compound:
											@ BreakStmtNode (18:6):
										>>> end of compound
									>>> elseStmt: null
								>>> end of compound
						>>> end of compound
						@ AssignExprNode (22:3):
						>>> lhs:
							@ IdentifierExprNode (22:3):
							>>> identifier: id
						>>> rhs:
							@ BoolConstExprNode (22:8):
							>>> value: false
					>>> end of compound
				>>> elseStmt: null
				@ CondStmtNode (24:2):
				>>> cond:
					@ BinaryExprNode (24:6):
					>>> op: EQ
					>>> lhs:
						@ IdentifierExprNode (24:6):
						>>> identifier: id
					>>> rhs:
						@ StringConstExprNode (24:12):
						>>> value: "i am string"
				>>> thenStmt:
					@ BlockStmtNode (24:27):
					>>> compound:
						@ CondStmtNode (25:3):
						>>> cond:
							@ FuncCallExprNode (25:7):
							>>> func:
								@ MemberAccessExprNode (25:7):
								>>> expr:
									@ ThisExprNode (25:7):
								>>> member: id
							>>> args:
								@ BinaryExprNode (25:15):
								>>> op: GT
								>>> lhs:
									@ IdentifierExprNode (25:15):
									>>> identifier: id
								>>> rhs:
									@ StringConstExprNode (25:20):
									>>> value: "hello"
							>>> end of args
						>>> thenStmt:
							@ BlockStmtNode (25:30):
							>>> compound:
								@ ReturnStmtNode (26:4):
								>>> expr: null
							>>> end of compound
						>>> elseStmt: null
						@ VarDeclListNode (28:3):
						>>> decls
							@ VaeDeclNode (28:8):
							>>> type:
								@ TypeNode (28:3):
								>>> type: ClassType(Test)
							>>> name: id
							>>> init:
								@ NewExprNode (28:17):
								>>> newType:
									@ TypeNode (28:17):
									>>> type: ClassType(Test)
						>>> end of decls
						@ CondStmtNode (29:3):
						>>> cond:
							@ FuncCallExprNode (29:7):
							>>> func:
								@ MemberAccessExprNode (29:7):
								>>> expr:
									@ IdentifierExprNode (29:7):
									>>> identifier: id
								>>> member: id
							>>> args:
								@ FuncCallExprNode (29:13):
								>>> func:
									@ MemberAccessExprNode (29:13):
									>>> expr:
										@ IdentifierExprNode (29:13):
										>>> identifier: id
									>>> member: id
								>>> args:
									@ FuncCallExprNode (29:19):
									>>> func:
										@ MemberAccessExprNode (29:19):
										>>> expr:
											@ IdentifierExprNode (29:19):
											>>> identifier: id
										>>> member: id
									>>> args:
										@ BoolConstExprNode (29:25):
										>>> value: false
									>>> end of args
								>>> end of args
							>>> end of args
						>>> thenStmt:
							@ BlockStmtNode (29:35):
							>>> compound:
								@ VarDeclListNode (30:4):
								>>> decls
									@ VaeDeclNode (30:8):
									>>> type:
										@ TypeNode (30:4):
										>>> type: mxstar.symbol.type.IntType@396e2f39
									>>> name: id
									>>> init:
										@ IntConstExprNode (30:13):
										>>> value: 233
								>>> end of decls
								@ BlockStmtNode (31:4):
								>>> compound:
									@ VarDeclListNode (32:5):
									>>> decls
										@ VaeDeclNode (32:10):
										>>> type:
											@ TypeNode (32:5):
											>>> type: ClassType(Test)
										>>> name: test
										>>> init:
											@ NewExprNode (32:21):
											>>> newType:
												@ TypeNode (32:21):
												>>> type: ClassType(Test)
									>>> end of decls
									@ CondStmtNode (33:5):
									>>> cond:
										@ FuncCallExprNode (33:9):
										>>> func:
											@ MemberAccessExprNode (33:9):
											>>> expr:
												@ IdentifierExprNode (33:9):
												>>> identifier: test
											>>> member: id
										>>> args:
											@ BinaryExprNode (33:17):
											>>> op: GT
											>>> lhs:
												@ IdentifierExprNode (33:17):
												>>> identifier: id
											>>> rhs:
												@ IntConstExprNode (33:22):
												>>> value: 0
										>>> end of args
									>>> thenStmt:
										@ BlockStmtNode (33:26):
										>>> compound:
											@ SuffixExprNode (34:6):
											>>> op: DEC
											>>> expr:
												@ IdentifierExprNode (34:6):
												>>> identifier: id
										>>> end of compound
									>>> elseStmt: null
									@ PrefixExprNode (36:5):
									>>> op: DEC
									>>> expr:
										@ IdentifierExprNode (36:7):
										>>> identifier: id
								>>> end of compound
								@ ReturnStmtNode (38:4):
								>>> expr: null
							>>> end of compound
						>>> elseStmt: null
						@ AssignExprNode (40:3):
						>>> lhs:
							@ IdentifierExprNode (40:3):
							>>> identifier: id
						>>> rhs:
							@ NewExprNode (40:12):
							>>> newType:
								@ TypeNode (40:12):
								>>> type: ClassType(Test)
					>>> end of compound
				>>> elseStmt: null
				@ AssignExprNode (42:2):
				>>> lhs:
					@ IdentifierExprNode (42:2):
					>>> identifier: id
				>>> rhs:
					@ StringConstExprNode (42:7):
					>>> value: "string"
			>>> end of compound
	>>> end of funcMember
	@ FuncDeclNode (46:0):
	>>> returnType:
		@ TypeNode (46:0):
		>>> type: ArrayType(ClassType(Test))
	>>> name: func
	>>> parameterList:
		@ VaeDeclNode (46:12):
		>>> type:
			@ TypeNode (46:12):
			>>> type: ArrayType(ArrayType(ClassType(Test)))
		>>> name: t
		>>> init: null
	>>> end of parameterList
	>>> body:
		@ BlockStmtNode (46:24):
		>>> compound:
			@ ReturnStmtNode (47:1):
			>>> expr:
				@ SubscriptExprNode (47:8):
				>>> arr:
					@ IdentifierExprNode (47:8):
					>>> identifier: t
				>>> sub:
					@ IntConstExprNode (47:10):
					>>> value: 0
		>>> end of compound
	@ FuncDeclNode (50:0):
	>>> returnType:
		@ TypeNode (50:0):
		>>> type: mxstar.symbol.type.IntType@396e2f39
	>>> name: main
	>>> parameterList: null
	>>> body:
		@ BlockStmtNode (50:11):
		>>> compound:
			@ VarDeclListNode (51:1):
			>>> decls
				@ VaeDeclNode (51:6):
				>>> type:
					@ TypeNode (51:1):
					>>> type: ClassType(Test)
				>>> name: test
				>>> init:
					@ NewExprNode (51:17):
					>>> newType:
						@ TypeNode (51:17):
						>>> type: ClassType(Test)
			>>> end of decls
			@ FuncCallExprNode (52:1):
			>>> func:
				@ MemberAccessExprNode (52:1):
				>>> expr:
					@ IdentifierExprNode (52:1):
					>>> identifier: test
				>>> member: test
			>>> args:
				@ StringConstExprNode (52:11):
				>>> value: "hello world"
			>>> end of args
			@ CondStmtNode (53:1):
			>>> cond:
				@ FuncCallExprNode (53:5):
				>>> func:
					@ MemberAccessExprNode (53:5):
					>>> expr:
						@ IdentifierExprNode (53:5):
						>>> identifier: test
					>>> member: id
				>>> args:
					@ BinaryExprNode (53:13):
					>>> op: GT
					>>> lhs:
						@ IdentifierExprNode (53:13):
						>>> identifier: id
					>>> rhs:
						@ IntConstExprNode (53:18):
						>>> value: 0
				>>> end of args
			>>> thenStmt:
				@ BlockStmtNode (53:22):
				>>> compound:
					@ VarDeclListNode (54:2):
					>>> decls
						@ VaeDeclNode (54:11):
						>>> type:
							@ TypeNode (54:2):
							>>> type: ArrayType(ArrayType(ClassType(Test)))
						>>> name: test
						>>> init:
							@ NewExprNode (54:22):
							>>> newType:
								@ TypeNode (54:22):
								>>> type: ArrayType(ArrayType(ClassType(Test)))
							>>> dims:
								@ IntConstExprNode (54:27):
								>>> value: 10
								@ IntConstExprNode (54:31):
								>>> value: 10
							>>> end of dims
					>>> end of decls
					@ CondStmtNode (55:2):
					>>> cond:
						@ BinaryExprNode (55:6):
						>>> op: LOG_AND
						>>> lhs:
							@ BinaryExprNode (55:6):
							>>> op: NEQ
							>>> lhs:
								@ FuncCallExprNode (55:6):
								>>> func:
									@ IdentifierExprNode (55:6):
									>>> identifier: func
								>>> args:
									@ IdentifierExprNode (55:11):
									>>> identifier: test
								>>> end of args
							>>> rhs:
								@ NullExprNode (55:20):
						>>> rhs:
							@ BinaryExprNode (55:28):
							>>> op: NEQ
							>>> lhs:
								@ SubscriptExprNode (55:28):
								>>> arr:
									@ FuncCallExprNode (55:28):
									>>> func:
										@ IdentifierExprNode (55:28):
										>>> identifier: func
									>>> args:
										@ IdentifierExprNode (55:33):
										>>> identifier: test
									>>> end of args
								>>> sub:
									@ IntConstExprNode (55:39):
									>>> value: 1
							>>> rhs:
								@ NullExprNode (55:45):
					>>> thenStmt:
						@ BlockStmtNode (55:51):
						>>> compound:
							@ AssignExprNode (56:3):
							>>> lhs:
								@ SubscriptExprNode (56:3):
								>>> arr:
									@ SubscriptExprNode (56:3):
									>>> arr:
										@ IdentifierExprNode (56:3):
										>>> identifier: test
									>>> sub:
										@ IntConstExprNode (56:8):
										>>> value: 1
								>>> sub:
									@ IntConstExprNode (56:11):
									>>> value: 1
							>>> rhs:
								@ SubscriptExprNode (56:16):
								>>> arr:
									@ FuncCallExprNode (56:16):
									>>> func:
										@ IdentifierExprNode (56:16):
										>>> identifier: func
									>>> args:
										@ IdentifierExprNode (56:21):
										>>> identifier: test
									>>> end of args
								>>> sub:
									@ IntConstExprNode (56:27):
									>>> value: 0
						>>> end of compound
					>>> elseStmt: null
					@ ReturnStmtNode (58:2):
					>>> expr:
						@ PrefixExprNode (58:9):
						>>> op: DEC
						>>> expr:
							@ IdentifierExprNode (58:11):
							>>> identifier: id
				>>> end of compound
			>>> elseStmt: null
			@ ReturnStmtNode (60:1):
			>>> expr:
				@ IntConstExprNode (60:8):
				>>> value: 0
		>>> end of compound
	@ VarDeclListNode (63:0):
	>>> decls
		@ VaeDeclNode (63:2):
		>>> type:
			@ TypeNode (63:0):
			>>> type: ClassType(A)
		>>> name: a
		>>> init:
			@ NewExprNode (63:10):
			>>> newType:
				@ TypeNode (63:10):
				>>> type: ClassType(A)
	>>> end of decls
	@ VarDeclListNode (64:0):
	>>> decls
		@ VaeDeclNode (64:2):
		>>> type:
			@ TypeNode (64:0):
			>>> type: ClassType(B)
		>>> name: b
		>>> init:
			@ FuncCallExprNode (64:6):
			>>> func:
				@ MemberAccessExprNode (64:6):
				>>> expr:
					@ IdentifierExprNode (64:6):
					>>> identifier: a
				>>> member: method
			>>> args: null
	>>> end of decls
	@ VarDeclListNode (65:0):
	>>> decls
		@ VaeDeclNode (65:2):
		>>> type:
			@ TypeNode (65:0):
			>>> type: ClassType(A)
		>>> name: aa
		>>> init:
			@ FuncCallExprNode (65:7):
			>>> func:
				@ MemberAccessExprNode (65:7):
				>>> expr:
					@ FuncCallExprNode (65:7):
					>>> func:
						@ MemberAccessExprNode (65:7):
						>>> expr:
							@ FuncCallExprNode (65:7):
							>>> func:
								@ MemberAccessExprNode (65:7):
								>>> expr:
									@ IdentifierExprNode (65:7):
									>>> identifier: b
								>>> member: method
							>>> args: null
						>>> member: method
					>>> args: null
				>>> member: method
			>>> args: null
	>>> end of decls
	@ ClassDeclNode (67:0):
	>>> name: A
	>>> varMember:
		@ VarDeclListNode (68:1):
		>>> decls
			@ VaeDeclNode (68:3):
			>>> type:
				@ TypeNode (68:1):
				>>> type: ClassType(B)
			>>> name: b
			>>> init: null
		>>> end of decls
	>>> end of varMem
	>>> funcMember:
		@ FuncDeclNode (69:1):
		>>> returnType:
			@ TypeNode (69:1):
			>>> type: ClassType(B)
		>>> name: method
		>>> parameterList: null
		>>> body:
			@ BlockStmtNode (69:12):
			>>> compound: null
	>>> end of funcMember
	@ ClassDeclNode (72:0):
	>>> name: B
	>>> varMember:
		@ VarDeclListNode (73:1):
		>>> decls
			@ VaeDeclNode (73:3):
			>>> type:
				@ TypeNode (73:1):
				>>> type: ClassType(A)
			>>> name: a
			>>> init: null
		>>> end of decls
	>>> end of varMem
	>>> funcMember:
		@ FuncDeclNode (74:1):
		>>> returnType:
			@ TypeNode (74:1):
			>>> type: ClassType(A)
		>>> name: method
		>>> parameterList: null
		>>> body:
			@ BlockStmtNode (74:12):
			>>> compound: null
	>>> end of funcMember
>>> end of decls
