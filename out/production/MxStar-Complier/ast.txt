@ ASTRootNode (1:0):
>>> decls:
	@ VarDeclListNode (1:0):
	>>> decls
		@ VaeDeclNode (1:8):
		>>> type:
			@ TypeNode (1:0):
			>>> type: ArrayType(ArrayType(mxstar.symbol.type.IntType@26a7b76d))
		>>> name: c
		>>> init: null
	>>> end of decls
	@ VarDeclListNode (2:0):
	>>> decls
		@ VaeDeclNode (2:4):
		>>> type:
			@ TypeNode (2:0):
			>>> type: mxstar.symbol.type.IntType@26a7b76d
		>>> name: ans
		>>> init:
			@ IntConstExprNode (2:10):
			>>> value: 0
	>>> end of decls
	@ VarDeclListNode (3:0):
	>>> decls
		@ VaeDeclNode (3:6):
		>>> type:
			@ TypeNode (3:0):
			>>> type: ArrayType(mxstar.symbol.type.IntType@26a7b76d)
		>>> name: visit
		>>> init:
			@ NewExprNode (3:18):
			>>> newType:
				@ TypeNode (3:18):
				>>> type: ArrayType(mxstar.symbol.type.IntType@26a7b76d)
			>>> dims:
				@ IntConstExprNode (3:22):
				>>> value: 110
			>>> end of dims
	>>> end of decls
	@ VarDeclListNode (4:0):
	>>> decls
		@ VaeDeclNode (4:6):
		>>> type:
			@ TypeNode (4:0):
			>>> type: ArrayType(mxstar.symbol.type.IntType@26a7b76d)
		>>> name: pre
		>>> init:
			@ NewExprNode (4:16):
			>>> newType:
				@ TypeNode (4:16):
				>>> type: ArrayType(mxstar.symbol.type.IntType@26a7b76d)
			>>> dims:
				@ IntConstExprNode (4:20):
				>>> value: 110
			>>> end of dims
	>>> end of decls
	@ VarDeclListNode (5:0):
	>>> decls
		@ VaeDeclNode (5:6):
		>>> type:
			@ TypeNode (5:0):
			>>> type: ArrayType(mxstar.symbol.type.IntType@26a7b76d)
		>>> name: f
		>>> init:
			@ NewExprNode (5:14):
			>>> newType:
				@ TypeNode (5:14):
				>>> type: ArrayType(mxstar.symbol.type.IntType@26a7b76d)
			>>> dims:
				@ IntConstExprNode (5:18):
				>>> value: 110
			>>> end of dims
	>>> end of decls
	@ VarDeclListNode (6:0):
	>>> decls
		@ VaeDeclNode (6:4):
		>>> type:
			@ TypeNode (6:0):
			>>> type: mxstar.symbol.type.IntType@26a7b76d
		>>> name: i
		>>> init: null
	>>> end of decls
	@ VarDeclListNode (7:0):
	>>> decls
		@ VaeDeclNode (7:4):
		>>> type:
			@ TypeNode (7:0):
			>>> type: mxstar.symbol.type.IntType@26a7b76d
		>>> name: j
		>>> init: null
	>>> end of decls
	@ VarDeclListNode (8:0):
	>>> decls
		@ VaeDeclNode (8:4):
		>>> type:
			@ TypeNode (8:0):
			>>> type: mxstar.symbol.type.IntType@26a7b76d
		>>> name: open
		>>> init: null
	>>> end of decls
	@ VarDeclListNode (9:0):
	>>> decls
		@ VaeDeclNode (9:4):
		>>> type:
			@ TypeNode (9:0):
			>>> type: mxstar.symbol.type.IntType@26a7b76d
		>>> name: closed
		>>> init: null
	>>> end of decls
	@ FuncDeclNode (11:0):
	>>> returnType:
		@ TypeNode (11:0):
		>>> type: mxstar.symbol.type.VoidType@4abdb505
	>>> name: origin
	>>> parameterList:
		@ VaeDeclNode (11:12):
		>>> type:
			@ TypeNode (11:12):
			>>> type: mxstar.symbol.type.IntType@26a7b76d
		>>> name: N
		>>> init: null
	>>> end of parameterList
	>>> body:
		@ BlockStmtNode (12:0):
		>>> compound:
			@ AssignExprNode (13:1):
			>>> lhs:
				@ IdentifierExprNode (13:1):
				>>> identifier: c
			>>> rhs:
				@ NewExprNode (13:9):
				>>> newType:
					@ TypeNode (13:9):
					>>> type: ArrayType(ArrayType(mxstar.symbol.type.IntType@26a7b76d))
				>>> dims:
					@ IdentifierExprNode (13:13):
					>>> identifier: N
				>>> end of dims
			@ ForStmtNode (14:4):
			>>> init:
				@ AssignExprNode (14:9):
				>>> lhs:
					@ IdentifierExprNode (14:9):
					>>> identifier: i
				>>> rhs:
					@ IntConstExprNode (14:13):
					>>> value: 0
			>>> cond:
				@ BinaryExprNode (14:16):
				>>> op: LT
				>>> lhs:
					@ IdentifierExprNode (14:16):
					>>> identifier: i
				>>> rhs:
					@ IdentifierExprNode (14:20):
					>>> identifier: N
			>>> step:
				@ SuffixExprNode (14:23):
				>>> op: INC
				>>> expr:
					@ IdentifierExprNode (14:23):
					>>> identifier: i
			>>> stmt: 
				@ BlockStmtNode (14:30):
				>>> compound:
					@ AssignExprNode (15:2):
					>>> lhs:
						@ SubscriptExprNode (15:2):
						>>> arr:
							@ IdentifierExprNode (15:2):
							>>> identifier: c
						>>> sub:
							@ IdentifierExprNode (15:4):
							>>> identifier: i
					>>> rhs:
						@ NewExprNode (15:13):
						>>> newType:
							@ TypeNode (15:13):
							>>> type: ArrayType(mxstar.symbol.type.IntType@26a7b76d)
						>>> dims:
							@ IdentifierExprNode (15:17):
							>>> identifier: N
						>>> end of dims
					@ ForStmtNode (16:8):
					>>> init:
						@ AssignExprNode (16:13):
						>>> lhs:
							@ IdentifierExprNode (16:13):
							>>> identifier: j
						>>> rhs:
							@ IntConstExprNode (16:17):
							>>> value: 0
					>>> cond:
						@ BinaryExprNode (16:20):
						>>> op: LT
						>>> lhs:
							@ IdentifierExprNode (16:20):
							>>> identifier: j
						>>> rhs:
							@ IdentifierExprNode (16:24):
							>>> identifier: N
					>>> step:
						@ SuffixExprNode (16:27):
						>>> op: INC
						>>> expr:
							@ IdentifierExprNode (16:27):
							>>> identifier: j
					>>> stmt: 
						@ AssignExprNode (17:8):
						>>> lhs:
							@ SubscriptExprNode (17:8):
							>>> arr:
								@ SubscriptExprNode (17:8):
								>>> arr:
									@ IdentifierExprNode (17:8):
									>>> identifier: c
								>>> sub:
									@ IdentifierExprNode (17:10):
									>>> identifier: i
							>>> sub:
								@ IdentifierExprNode (17:13):
								>>> identifier: j
						>>> rhs:
							@ IntConstExprNode (17:18):
							>>> value: 0
				>>> end of compound
		>>> end of compound
	@ FuncDeclNode (21:0):
	>>> returnType:
		@ TypeNode (21:0):
		>>> type: mxstar.symbol.type.IntType@26a7b76d
	>>> name: build
	>>> parameterList:
		@ VaeDeclNode (21:10):
		>>> type:
			@ TypeNode (21:10):
			>>> type: mxstar.symbol.type.IntType@26a7b76d
		>>> name: start
		>>> init: null
		@ VaeDeclNode (21:21):
		>>> type:
			@ TypeNode (21:21):
			>>> type: mxstar.symbol.type.IntType@26a7b76d
		>>> name: ending
		>>> init: null
	>>> end of parameterList
	>>> body:
		@ BlockStmtNode (21:33):
		>>> compound:
			@ ForStmtNode (22:4):
			>>> init:
				@ AssignExprNode (22:9):
				>>> lhs:
					@ IdentifierExprNode (22:9):
					>>> identifier: i
				>>> rhs:
					@ IntConstExprNode (22:13):
					>>> value: 1
			>>> cond:
				@ BinaryExprNode (22:16):
				>>> op: LEQ
				>>> lhs:
					@ IdentifierExprNode (22:16):
					>>> identifier: i
				>>> rhs:
					@ IntConstExprNode (22:21):
					>>> value: 49
			>>> step:
				@ SuffixExprNode (22:25):
				>>> op: INC
				>>> expr:
					@ IdentifierExprNode (22:25):
					>>> identifier: i
			>>> stmt: 
				@ BlockStmtNode (22:30):
				>>> compound:
					@ ForStmtNode (23:8):
					>>> init:
						@ AssignExprNode (23:13):
						>>> lhs:
							@ IdentifierExprNode (23:13):
							>>> identifier: j
						>>> rhs:
							@ IntConstExprNode (23:17):
							>>> value: 50
					>>> cond:
						@ BinaryExprNode (23:21):
						>>> op: LEQ
						>>> lhs:
							@ IdentifierExprNode (23:21):
							>>> identifier: j
						>>> rhs:
							@ BinaryExprNode (23:26):
							>>> op: ADD
							>>> lhs:
								@ BinaryExprNode (23:26):
								>>> op: SUB
								>>> lhs:
									@ IntConstExprNode (23:26):
									>>> value: 98
								>>> rhs:
									@ IdentifierExprNode (23:29):
									>>> identifier: i
							>>> rhs:
								@ IntConstExprNode (23:31):
								>>> value: 1
					>>> step:
						@ SuffixExprNode (23:34):
						>>> op: INC
						>>> expr:
							@ IdentifierExprNode (23:34):
							>>> identifier: j
					>>> stmt: 
						@ BlockStmtNode (23:39):
						>>> compound:
							@ AssignExprNode (24:12):
							>>> lhs:
								@ SubscriptExprNode (24:12):
								>>> arr:
									@ SubscriptExprNode (24:12):
									>>> arr:
										@ IdentifierExprNode (24:12):
										>>> identifier: c
									>>> sub:
										@ IdentifierExprNode (24:14):
										>>> identifier: i
								>>> sub:
									@ IdentifierExprNode (24:17):
									>>> identifier: j
							>>> rhs:
								@ IntConstExprNode (24:22):
								>>> value: 1
						>>> end of compound
				>>> end of compound
			@ ForStmtNode (27:4):
			>>> init:
				@ AssignExprNode (27:9):
				>>> lhs:
					@ IdentifierExprNode (27:9):
					>>> identifier: i
				>>> rhs:
					@ IntConstExprNode (27:13):
					>>> value: 1
			>>> cond:
				@ BinaryExprNode (27:16):
				>>> op: LEQ
				>>> lhs:
					@ IdentifierExprNode (27:16):
					>>> identifier: i
				>>> rhs:
					@ IntConstExprNode (27:21):
					>>> value: 49
			>>> step:
				@ SuffixExprNode (27:25):
				>>> op: INC
				>>> expr:
					@ IdentifierExprNode (27:25):
					>>> identifier: i
			>>> stmt: 
				@ AssignExprNode (28:8):
				>>> lhs:
					@ SubscriptExprNode (28:8):
					>>> arr:
						@ SubscriptExprNode (28:8):
						>>> arr:
							@ IdentifierExprNode (28:8):
							>>> identifier: c
						>>> sub:
							@ IdentifierExprNode (28:10):
							>>> identifier: start
					>>> sub:
						@ IdentifierExprNode (28:17):
						>>> identifier: i
				>>> rhs:
					@ IntConstExprNode (28:22):
					>>> value: 1
			@ ForStmtNode (29:4):
			>>> init:
				@ AssignExprNode (29:9):
				>>> lhs:
					@ IdentifierExprNode (29:9):
					>>> identifier: i
				>>> rhs:
					@ IntConstExprNode (29:13):
					>>> value: 50
			>>> cond:
				@ BinaryExprNode (29:17):
				>>> op: LEQ
				>>> lhs:
					@ IdentifierExprNode (29:17):
					>>> identifier: i
				>>> rhs:
					@ IntConstExprNode (29:22):
					>>> value: 98
			>>> step:
				@ SuffixExprNode (29:26):
				>>> op: INC
				>>> expr:
					@ IdentifierExprNode (29:26):
					>>> identifier: i
			>>> stmt: 
				@ AssignExprNode (30:8):
				>>> lhs:
					@ SubscriptExprNode (30:8):
					>>> arr:
						@ SubscriptExprNode (30:8):
						>>> arr:
							@ IdentifierExprNode (30:8):
							>>> identifier: c
						>>> sub:
							@ IdentifierExprNode (30:10):
							>>> identifier: i
					>>> sub:
						@ IdentifierExprNode (30:13):
						>>> identifier: ending
				>>> rhs:
					@ IntConstExprNode (30:23):
					>>> value: 1
			@ ReturnStmtNode (31:4):
			>>> expr:
				@ IntConstExprNode (31:11):
				>>> value: 0
		>>> end of compound
	@ FuncDeclNode (34:0):
	>>> returnType:
		@ TypeNode (34:0):
		>>> type: mxstar.symbol.type.IntType@26a7b76d
	>>> name: find
	>>> parameterList:
		@ VaeDeclNode (34:9):
		>>> type:
			@ TypeNode (34:9):
			>>> type: mxstar.symbol.type.IntType@26a7b76d
		>>> name: ending
		>>> init: null
		@ VaeDeclNode (34:21):
		>>> type:
			@ TypeNode (34:21):
			>>> type: mxstar.symbol.type.IntType@26a7b76d
		>>> name: start
		>>> init: null
		@ VaeDeclNode (34:32):
		>>> type:
			@ TypeNode (34:32):
			>>> type: mxstar.symbol.type.IntType@26a7b76d
		>>> name: flag
		>>> init: null
	>>> end of parameterList
	>>> body:
		@ BlockStmtNode (34:42):
		>>> compound:
			@ AssignExprNode (35:4):
			>>> lhs:
				@ IdentifierExprNode (35:4):
				>>> identifier: open
			>>> rhs:
				@ IntConstExprNode (35:11):
				>>> value: 0
			@ AssignExprNode (36:4):
			>>> lhs:
				@ IdentifierExprNode (36:4):
				>>> identifier: closed
			>>> rhs:
				@ IntConstExprNode (36:13):
				>>> value: 1
			@ ForStmtNode (37:4):
			>>> init:
				@ AssignExprNode (37:9):
				>>> lhs:
					@ IdentifierExprNode (37:9):
					>>> identifier: i
				>>> rhs:
					@ IntConstExprNode (37:13):
					>>> value: 1
			>>> cond:
				@ BinaryExprNode (37:16):
				>>> op: LEQ
				>>> lhs:
					@ IdentifierExprNode (37:16):
					>>> identifier: i
				>>> rhs:
					@ IdentifierExprNode (37:21):
					>>> identifier: ending
			>>> step:
				@ SuffixExprNode (37:29):
				>>> op: INC
				>>> expr:
					@ IdentifierExprNode (37:29):
					>>> identifier: i
			>>> stmt: 
				@ BlockStmtNode (37:34):
				>>> compound:
					@ AssignExprNode (38:8):
					>>> lhs:
						@ SubscriptExprNode (38:8):
						>>> arr:
							@ IdentifierExprNode (38:8):
							>>> identifier: visit
						>>> sub:
							@ IdentifierExprNode (38:14):
							>>> identifier: i
					>>> rhs:
						@ IntConstExprNode (38:19):
						>>> value: 0
				>>> end of compound
			@ AssignExprNode (40:4):
			>>> lhs:
				@ SubscriptExprNode (40:4):
				>>> arr:
					@ IdentifierExprNode (40:4):
					>>> identifier: f
				>>> sub:
					@ IntConstExprNode (40:6):
					>>> value: 1
			>>> rhs:
				@ IdentifierExprNode (40:9):
				>>> identifier: start
			@ AssignExprNode (41:4):
			>>> lhs:
				@ SubscriptExprNode (41:4):
				>>> arr:
					@ IdentifierExprNode (41:4):
					>>> identifier: visit
				>>> sub:
					@ IdentifierExprNode (41:10):
					>>> identifier: start
			>>> rhs:
				@ IntConstExprNode (41:17):
				>>> value: 1
			@ AssignExprNode (42:4):
			>>> lhs:
				@ SubscriptExprNode (42:4):
				>>> arr:
					@ IdentifierExprNode (42:4):
					>>> identifier: pre
				>>> sub:
					@ IdentifierExprNode (42:8):
					>>> identifier: start
			>>> rhs:
				@ IntConstExprNode (42:15):
				>>> value: 0
			@ AssignExprNode (43:4):
			>>> lhs:
				@ IdentifierExprNode (43:4):
				>>> identifier: flag
			>>> rhs:
				@ IntConstExprNode (43:9):
				>>> value: 0
			@ WhileStmtNode (44:4):
			>>> cond:
				@ BinaryExprNode (44:11):
				>>> op: LOG_AND
				>>> lhs:
					@ BinaryExprNode (44:11):
					>>> op: LT
					>>> lhs:
						@ IdentifierExprNode (44:11):
						>>> identifier: open
					>>> rhs:
						@ IdentifierExprNode (44:16):
						>>> identifier: closed
				>>> rhs:
					@ BinaryExprNode (44:26):
					>>> op: EQ
					>>> lhs:
						@ IdentifierExprNode (44:26):
						>>> identifier: flag
					>>> rhs:
						@ IntConstExprNode (44:32):
						>>> value: 0
			>>> stmt:
				@ BlockStmtNode (44:35):
				>>> compound:
					@ SuffixExprNode (45:8):
					>>> op: INC
					>>> expr:
						@ IdentifierExprNode (45:8):
						>>> identifier: open
					@ AssignExprNode (46:8):
					>>> lhs:
						@ IdentifierExprNode (46:8):
						>>> identifier: i
					>>> rhs:
						@ SubscriptExprNode (46:10):
						>>> arr:
							@ IdentifierExprNode (46:10):
							>>> identifier: f
						>>> sub:
							@ IdentifierExprNode (46:12):
							>>> identifier: open
					@ ForStmtNode (47:8):
					>>> init:
						@ AssignExprNode (47:13):
						>>> lhs:
							@ IdentifierExprNode (47:13):
							>>> identifier: j
						>>> rhs:
							@ IntConstExprNode (47:17):
							>>> value: 1
					>>> cond:
						@ BinaryExprNode (47:20):
						>>> op: LEQ
						>>> lhs:
							@ IdentifierExprNode (47:20):
							>>> identifier: j
						>>> rhs:
							@ IdentifierExprNode (47:25):
							>>> identifier: ending
					>>> step:
						@ SuffixExprNode (47:33):
						>>> op: INC
						>>> expr:
							@ IdentifierExprNode (47:33):
							>>> identifier: j
					>>> stmt: 
						@ CondStmtNode (48:12):
						>>> cond:
							@ BinaryExprNode (48:16):
							>>> op: LOG_AND
							>>> lhs:
								@ BinaryExprNode (48:16):
								>>> op: GT
								>>> lhs:
									@ SubscriptExprNode (48:16):
									>>> arr:
										@ SubscriptExprNode (48:16):
										>>> arr:
											@ IdentifierExprNode (48:16):
											>>> identifier: c
										>>> sub:
											@ IdentifierExprNode (48:18):
											>>> identifier: i
									>>> sub:
										@ IdentifierExprNode (48:21):
										>>> identifier: j
								>>> rhs:
									@ IntConstExprNode (48:24):
									>>> value: 0
							>>> rhs:
								@ BinaryExprNode (48:29):
								>>> op: EQ
								>>> lhs:
									@ SubscriptExprNode (48:29):
									>>> arr:
										@ IdentifierExprNode (48:29):
										>>> identifier: visit
									>>> sub:
										@ IdentifierExprNode (48:35):
										>>> identifier: j
								>>> rhs:
									@ IntConstExprNode (48:39):
									>>> value: 0
						>>> thenStmt:
							@ BlockStmtNode (48:42):
							>>> compound:
								@ AssignExprNode (49:16):
								>>> lhs:
									@ SubscriptExprNode (49:16):
									>>> arr:
										@ IdentifierExprNode (49:16):
										>>> identifier: visit
									>>> sub:
										@ IdentifierExprNode (49:22):
										>>> identifier: j
								>>> rhs:
									@ IntConstExprNode (49:25):
									>>> value: 1
								@ SuffixExprNode (50:16):
								>>> op: INC
								>>> expr:
									@ IdentifierExprNode (50:16):
									>>> identifier: closed
								@ AssignExprNode (51:16):
								>>> lhs:
									@ SubscriptExprNode (51:16):
									>>> arr:
										@ IdentifierExprNode (51:16):
										>>> identifier: f
									>>> sub:
										@ IdentifierExprNode (51:18):
										>>> identifier: closed
								>>> rhs:
									@ IdentifierExprNode (51:26):
									>>> identifier: j
								@ AssignExprNode (52:16):
								>>> lhs:
									@ SubscriptExprNode (52:16):
									>>> arr:
										@ IdentifierExprNode (52:16):
										>>> identifier: pre
									>>> sub:
										@ IdentifierExprNode (52:20):
										>>> identifier: j
								>>> rhs:
									@ IdentifierExprNode (52:23):
									>>> identifier: i
								@ CondStmtNode (53:16):
								>>> cond:
									@ BinaryExprNode (53:20):
									>>> op: EQ
									>>> lhs:
										@ IdentifierExprNode (53:20):
										>>> identifier: closed
									>>> rhs:
										@ IdentifierExprNode (53:28):
										>>> identifier: ending
								>>> thenStmt:
									@ AssignExprNode (53:36):
									>>> lhs:
										@ IdentifierExprNode (53:36):
										>>> identifier: flag
									>>> rhs:
										@ IntConstExprNode (53:41):
										>>> value: 1
								>>> elseStmt: null
							>>> end of compound
						>>> elseStmt: null
				>>> end of compound
			@ ReturnStmtNode (56:4):
			>>> expr:
				@ IdentifierExprNode (56:11):
				>>> identifier: flag
		>>> end of compound
	@ FuncDeclNode (59:0):
	>>> returnType:
		@ TypeNode (59:0):
		>>> type: mxstar.symbol.type.IntType@26a7b76d
	>>> name: improve
	>>> parameterList:
		@ VaeDeclNode (59:12):
		>>> type:
			@ TypeNode (59:12):
			>>> type: mxstar.symbol.type.IntType@26a7b76d
		>>> name: ending
		>>> init: null
	>>> end of parameterList
	>>> body:
		@ BlockStmtNode (59:24):
		>>> compound:
			@ AssignExprNode (60:4):
			>>> lhs:
				@ IdentifierExprNode (60:4):
				>>> identifier: i
			>>> rhs:
				@ IdentifierExprNode (60:6):
				>>> identifier: ending
			@ SuffixExprNode (61:4):
			>>> op: INC
			>>> expr:
				@ IdentifierExprNode (61:4):
				>>> identifier: ans
			@ WhileStmtNode (62:4):
			>>> cond:
				@ BinaryExprNode (62:11):
				>>> op: GT
				>>> lhs:
					@ SubscriptExprNode (62:11):
					>>> arr:
						@ IdentifierExprNode (62:11):
						>>> identifier: pre
					>>> sub:
						@ IdentifierExprNode (62:15):
						>>> identifier: i
				>>> rhs:
					@ IntConstExprNode (62:18):
					>>> value: 0
			>>> stmt:
				@ BlockStmtNode (62:21):
				>>> compound:
					@ AssignExprNode (63:8):
					>>> lhs:
						@ IdentifierExprNode (63:8):
						>>> identifier: j
					>>> rhs:
						@ SubscriptExprNode (63:10):
						>>> arr:
							@ IdentifierExprNode (63:10):
							>>> identifier: pre
						>>> sub:
							@ IdentifierExprNode (63:14):
							>>> identifier: i
					@ SuffixExprNode (64:8):
					>>> op: DEC
					>>> expr:
						@ SubscriptExprNode (64:8):
						>>> arr:
							@ SubscriptExprNode (64:8):
							>>> arr:
								@ IdentifierExprNode (64:8):
								>>> identifier: c
							>>> sub:
								@ IdentifierExprNode (64:10):
								>>> identifier: j
						>>> sub:
							@ IdentifierExprNode (64:13):
							>>> identifier: i
					@ SuffixExprNode (65:8):
					>>> op: INC
					>>> expr:
						@ SubscriptExprNode (65:8):
						>>> arr:
							@ SubscriptExprNode (65:8):
							>>> arr:
								@ IdentifierExprNode (65:8):
								>>> identifier: c
							>>> sub:
								@ IdentifierExprNode (65:10):
								>>> identifier: i
						>>> sub:
							@ IdentifierExprNode (65:13):
							>>> identifier: j
					@ AssignExprNode (66:8):
					>>> lhs:
						@ IdentifierExprNode (66:8):
						>>> identifier: i
					>>> rhs:
						@ IdentifierExprNode (66:10):
						>>> identifier: j
				>>> end of compound
			@ ReturnStmtNode (68:4):
			>>> expr:
				@ IntConstExprNode (68:11):
				>>> value: 0
		>>> end of compound
	@ FuncDeclNode (71:0):
	>>> returnType:
		@ TypeNode (71:0):
		>>> type: mxstar.symbol.type.IntType@26a7b76d
	>>> name: main
	>>> parameterList: null
	>>> body:
		@ BlockStmtNode (71:11):
		>>> compound:
			@ FuncCallExprNode (72:1):
			>>> func:
				@ IdentifierExprNode (72:1):
				>>> identifier: origin
			>>> args:
				@ IntConstExprNode (72:8):
				>>> value: 110
			>>> end of args
			@ VarDeclListNode (73:4):
			>>> decls
				@ VaeDeclNode (73:8):
				>>> type:
					@ TypeNode (73:4):
					>>> type: mxstar.symbol.type.IntType@26a7b76d
				>>> name: k
				>>> init: null
			>>> end of decls
			@ VarDeclListNode (74:1):
			>>> decls
				@ VaeDeclNode (74:5):
				>>> type:
					@ TypeNode (74:1):
					>>> type: mxstar.symbol.type.IntType@26a7b76d
				>>> name: start
				>>> init: null
			>>> end of decls
			@ VarDeclListNode (75:1):
			>>> decls
				@ VaeDeclNode (75:5):
				>>> type:
					@ TypeNode (75:1):
					>>> type: mxstar.symbol.type.IntType@26a7b76d
				>>> name: ending
				>>> init: null
			>>> end of decls
			@ VarDeclListNode (76:4):
			>>> decls
				@ VaeDeclNode (76:8):
				>>> type:
					@ TypeNode (76:4):
					>>> type: mxstar.symbol.type.IntType@26a7b76d
				>>> name: flag
				>>> init: null
			>>> end of decls
			@ VarDeclListNode (77:4):
			>>> decls
				@ VaeDeclNode (77:8):
				>>> type:
					@ TypeNode (77:4):
					>>> type: mxstar.symbol.type.IntType@26a7b76d
				>>> name: i1
				>>> init: null
			>>> end of decls
			@ AssignExprNode (79:4):
			>>> lhs:
				@ IdentifierExprNode (79:4):
				>>> identifier: k
			>>> rhs:
				@ IntConstExprNode (79:8):
				>>> value: 0
			@ AssignExprNode (80:4):
			>>> lhs:
				@ IdentifierExprNode (80:4):
				>>> identifier: start
			>>> rhs:
				@ IntConstExprNode (80:12):
				>>> value: 99
			@ AssignExprNode (81:4):
			>>> lhs:
				@ IdentifierExprNode (81:4):
				>>> identifier: ending
			>>> rhs:
				@ IntConstExprNode (81:13):
				>>> value: 100
			@ AssignExprNode (82:4):
			>>> lhs:
				@ IdentifierExprNode (82:4):
				>>> identifier: flag
			>>> rhs:
				@ IntConstExprNode (82:11):
				>>> value: 0
			@ FuncCallExprNode (84:4):
			>>> func:
				@ IdentifierExprNode (84:4):
				>>> identifier: build
			>>> args:
				@ IdentifierExprNode (84:10):
				>>> identifier: start
				@ IdentifierExprNode (84:17):
				>>> identifier: ending
			>>> end of args
			@ WhileStmtNode (85:4):
			>>> cond:
				@ BinaryExprNode (85:11):
				>>> op: GT
				>>> lhs:
					@ FuncCallExprNode (85:11):
					>>> func:
						@ IdentifierExprNode (85:11):
						>>> identifier: find
					>>> args:
						@ IdentifierExprNode (85:16):
						>>> identifier: ending
						@ IdentifierExprNode (85:24):
						>>> identifier: start
						@ IdentifierExprNode (85:31):
						>>> identifier: flag
					>>> end of args
				>>> rhs:
					@ IntConstExprNode (85:37):
					>>> value: 0
			>>> stmt:
				@ BlockStmtNode (85:40):
				>>> compound:
					@ FuncCallExprNode (86:8):
					>>> func:
						@ IdentifierExprNode (86:8):
						>>> identifier: improve
					>>> args:
						@ IdentifierExprNode (86:16):
						>>> identifier: ending
					>>> end of args
				>>> end of compound
			@ FuncCallExprNode (88:1):
			>>> func:
				@ IdentifierExprNode (88:1):
				>>> identifier: println
			>>> args:
				@ FuncCallExprNode (88:9):
				>>> func:
					@ IdentifierExprNode (88:9):
					>>> identifier: toString
				>>> args:
					@ IdentifierExprNode (88:18):
					>>> identifier: ans
				>>> end of args
			>>> end of args
			@ ReturnStmtNode (89:4):
			>>> expr:
				@ IntConstExprNode (89:11):
				>>> value: 0
		>>> end of compound
>>> end of decls
